import { Request, Response } from 'express';
import prisma from '../config/db';
import jwt from 'jsonwebtoken';
import {
  deleteAllDiscordMessages,
  sendUserNotification,
} from '../services/discord.service';
import { clients } from '../index';
import multer from 'multer';
import { uploadFile } from '../services/cloudinary.service';

const userSelect = {
  id: true,
  email: true,
  username: true,
  name: true,
  avatar: true,
  role: true,
  isActive: true,
  createdAt: true,
  updatedAt: true,
  followedArtists: {
    select: {
      artistId: true,
      createdAt: true,
    },
  },
} as const;

if (!process.env.JWT_SECRET) {
  throw new Error('JWT_SECRET is not defined in environment variables');
}

// C·∫•u h√¨nh multer
const storage = multer.memoryStorage();
const upload = multer({
  storage,
  limits: {
    fileSize: 5 * 1024 * 1024, // 5MB
  },
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('Only image files are allowed'));
    }
  },
});

export const register = async (req: Request, res: Response): Promise<void> => {
  try {
    const { email, password, name, role, isAdmin } = req.body; // Th√™m tr∆∞·ªùng isAdmin
    const avatarFile = req.file;

    let avatarUrl: string | undefined;

    if (avatarFile) {
      const avatarUpload: any = await uploadFile(
        avatarFile.buffer,
        'avatars',
        'image'
      );
      avatarUrl = avatarUpload.secure_url;
    }

    // X·ª≠ l√Ω ƒëƒÉng k√Ω artist
    if (role === 'ARTIST') {
      const bio = req.body.bio || '';
      const newArtist = await prisma.artist.create({
        data: {
          email,
          name,
          password,
          bio,
          avatar: avatarUrl,
          role: 'ARTIST',
          isVerified: false,
        },
        select: {
          id: true,
          email: true,
          name: true,
          role: true,
          isVerified: true,
        },
      });

      await sendUserNotification(`üéâ New artist registered: ${name}`);

      res.status(201).json({
        message: 'ƒêƒÉng k√Ω artist th√†nh c√¥ng',
        user: newArtist,
      });
      return;
    }

    // X·ª≠ l√Ω ƒëƒÉng k√Ω user th∆∞·ªùng ho·∫∑c admin
    const { username } = req.body;
    if (!username) {
      res
        .status(400)
        .json({ message: 'Username is required for regular users' });
      return;
    }

    // X√°c ƒë·ªãnh role d·ª±a tr√™n tr∆∞·ªùng isAdmin ho·∫∑c role
    const userRole = isAdmin ? 'ADMIN' : role === 'ADMIN' ? 'ADMIN' : 'USER';

    const newUser = await prisma.user.create({
      data: {
        email,
        username,
        password,
        name,
        avatar: avatarUrl,
        role: userRole, // S·ª≠ d·ª•ng role ƒë√£ x√°c ƒë·ªãnh
      },
      select: {
        id: true,
        email: true,
        username: true,
        name: true,
        role: true,
      },
    });

    // G·ª≠i th√¥ng b√°o ƒë·∫øn Discord khi user th∆∞·ªùng ƒëƒÉng k√Ω
    await sendUserNotification(`üéâ New user registered: ${username}`);

    res.status(201).json({
      message: 'ƒêƒÉng k√Ω user th√†nh c√¥ng',
      user: newUser,
    });
  } catch (error) {
    console.error('Register error:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
};

export const login = async (req: Request, res: Response): Promise<void> => {
  try {
    const { email, password } = req.body;

    // T√¨m user ho·∫∑c artist v·ªõi email
    const user = await prisma.user.findUnique({
      where: { email },
      select: {
        id: true,
        email: true,
        username: true,
        password: true,
        name: true,
        avatar: true,
        role: true,
        isActive: true,
      },
    });

    const artist = await prisma.artist.findUnique({
      where: { email },
      select: {
        id: true,
        email: true,
        name: true,
        password: true,
        avatar: true,
        role: true,
        isActive: true,
        isVerified: true,
      },
    });

    const account = user || artist;

    if (!account) {
      res
        .status(404)
        .json({ message: 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.' });
      return;
    }

    // Ki·ªÉm tra t√†i kho·∫£n c√≥ b·ªã kh√≥a kh√¥ng
    if (!account.isActive) {
      res
        .status(403)
        .json({ message: 'T√†i kho·∫£n ƒë√£ b·ªã kh√≥a. Vui l√≤ng li√™n h·ªá Admin.' });
      return;
    }

    // Ki·ªÉm tra password (b·∫°n c·∫ßn th√™m logic so s√°nh password hash)
    // V√≠ d·ª•: const isPasswordValid = await comparePassword(password, account.password);
    // if (!isPasswordValid) {
    //   res.status(401).json({ message: 'Sai m·∫≠t kh·∫©u' });
    //   return;
    // }

    // Generate JWT token
    const token = jwt.sign({ userId: account.id }, process.env.JWT_SECRET!, {
      expiresIn: '24h',
    });

    // Remove password from response
    const { password: _, ...accountWithoutPassword } = account;

    res.json({
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
      user: accountWithoutPassword,
      token,
    });
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
};

// T√¨m t·∫•t c·∫£ Users
export const getAllUsers = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const users = await prisma.user.findMany({
      select: userSelect,
    });
    res.json(users);
  } catch (error) {
    res.status(500).json({ message: 'Internal server error' });
  }
};

// T√¨m 1 user c·ª• th·ªÉ theo id
export const getUserById = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { id } = req.params;
    const user = await prisma.user.findUnique({
      where: { id },
      select: userSelect,
    });

    if (!user) {
      res
        .status(404)
        .json({ message: 'Kh√¥ng t√¨m th·∫•y user n√†y trong h·ªá th·ªëng.' });
      return;
    }

    res.json(user);
  } catch (error) {
    res.status(500).json({ message: 'Internal server error' });
  }
};

// T√¨m 1 user c·ª• th·ªÉ theo username
export const getUserByUsername = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { username } = req.params;
    const user = await prisma.user.findUnique({
      where: { username },
      select: userSelect,
    });

    if (!user) {
      res.status(404).json({
        message: `Kh√¥ng t√¨m th·∫•y user v·ªõi username: ${username}`,
      });
      return;
    }

    res.json(user);
  } catch (error) {
    res.status(500).json({ message: 'Internal server error' });
  }
};

// C·∫≠p nh·∫≠t th√¥ng tin user
export const updateUser = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { username } = req.params;
    const { name, email, avatar } = req.body;

    const existingUser = await prisma.user.findUnique({
      where: { username },
    });

    if (!existingUser) {
      res.status(404).json({ message: 'User kh√¥ng t·ªìn t·∫°i' });
      return;
    }

    const updatedUser = await prisma.user.update({
      where: { username },
      data: {
        name,
        email,
        avatar,
        updatedAt: new Date(),
      },
      select: userSelect,
    });

    res.json({
      message: 'C·∫≠p nh·∫≠t user th√†nh c√¥ng',
      user: updatedUser,
    });
  } catch (error) {
    console.error('Update user error:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
};

// X√≥a user (Soft delete - ch·ªâ v√¥ hi·ªáu h√≥a)
export const deactivateUser = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { username } = req.params;

    const existingUser = await prisma.user.findUnique({
      where: { username },
      select: {
        id: true,
        username: true,
        isActive: true,
      },
    });

    if (!existingUser) {
      res.status(404).json({ message: 'User kh√¥ng t·ªìn t·∫°i' });
      return;
    }

    await prisma.user.update({
      where: { username },
      data: {
        isActive: false,
        updatedAt: new Date(),
      },
    });

    // G·ª≠i event force logout ngay l·∫≠p t·ª©c
    const logoutEvent = {
      type: 'FORCE_LOGOUT',
      userId: existingUser.id,
      timestamp: new Date().toISOString(),
    };

    console.log('Broadcasting logout event:', logoutEvent);
    clients.forEach((client) => {
      client(logoutEvent);
    });

    res.json({
      message: 'ƒê√£ v√¥ hi·ªáu h√≥a t√†i kho·∫£n th√†nh c√¥ng',
    });
  } catch (error) {
    console.error('Deactivate user error:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
};

// K√≠ch ho·∫°t l·∫°i t√†i kho·∫£n
export const activateUser = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { username } = req.params;

    const existingUser = await prisma.user.findUnique({
      where: { username },
    });

    if (!existingUser) {
      res.status(404).json({ message: 'User kh√¥ng t·ªìn t·∫°i' });
      return;
    }

    await prisma.user.update({
      where: { username },
      data: {
        isActive: true,
        updatedAt: new Date(),
      },
    });

    res.json({
      message: 'ƒê√£ k√≠ch ho·∫°t l·∫°i t√†i kho·∫£n th√†nh c√¥ng',
    });
  } catch (error) {
    console.error('Activate user error:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
};

// X√≥a user ho√†n to√†n (Hard delete)
export const deleteUser = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { username } = req.params;

    const user = await prisma.user.findUnique({
      where: { username },
    });

    if (!user) {
      res.status(404).json({ message: 'User not found' });
      return;
    }

    // G·ª≠i event force logout tr∆∞·ªõc khi x√≥a
    const logoutEvent = {
      type: 'FORCE_LOGOUT',
      userId: user.id,
      message: 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i',
      timestamp: new Date().toISOString(),
    };

    clients.forEach((client) => {
      client(logoutEvent);
    });

    // X√≥a user
    await prisma.user.delete({
      where: { username },
    });

    res.status(200).json({ message: 'User deleted successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Failed to delete user' });
  }
};

// X√≥a s·∫°ch d·ªØ li·ªáu
export const purgeAllData = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    // X√≥a t·∫•t c·∫£ tracks
    await prisma.track.deleteMany();

    // X√≥a t·∫•t c·∫£ albums
    await prisma.album.deleteMany();

    // X√≥a t·∫•t c·∫£ users ngo·∫°i tr·ª´ admin hi·ªán t·∫°i
    await prisma.user.deleteMany({
      where: {
        NOT: {
          id: req.user?.id,
        },
      },
    });

    // X√≥a messages tr√™n Discord
    await deleteAllDiscordMessages();

    res.json({ message: 'All data purged successfully' });
  } catch (error) {
    console.error('Purge data error:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
};
