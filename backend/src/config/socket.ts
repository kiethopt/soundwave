import { Server as SocketIOServer, Socket } from 'socket.io';
import http from 'http';

let io: SocketIOServer;

// L∆∞u tr·ªØ map gi·ªØa userId v√† socketId
// L∆∞u √Ω: Trong m√¥i tr∆∞·ªùng production, b·∫°n n√™n c√¢n nh·∫Øc d√πng Redis ho·∫∑c gi·∫£i ph√°p kh√°c
// ƒë·ªÉ qu·∫£n l√Ω state n√†y n·∫øu c√≥ nhi·ªÅu instance server.
const userSockets = new Map<string, string>(); // Map<userId, socketId>

// Initialize Socket.IO and attach it to the HTTP server
export const initializeSocket = (server: http.Server): SocketIOServer => {
  io = new SocketIOServer(server, {
    // Configure CORS to allow connections from your frontend URL
    cors: {
      origin: process.env.NEXT_PUBLIC_FRONTEND_URL || "http://localhost:3000", // Ensure this env variable is set or adjust the default
      methods: ["GET", "POST"],
      credentials: true
    }
  });

  io.on('connection', (socket: Socket) => {
    // console.log(`üîå Socket connected: ${socket.id}`);

    // L·∫Øng nghe s·ª± ki·ªán khi user x√°c th·ª±c v√† g·ª≠i userId
    // Client c·∫ßn g·ª≠i s·ª± ki·ªán n√†y sau khi k·∫øt n·ªëi v√† ƒë√£ c√≥ th√¥ng tin user
    socket.on('register_user', (userId: string) => {
        if (userId) {
         // console.log(`‚úÖ Registering user ${userId} with socket ${socket.id}`);
          userSockets.set(userId, socket.id);

          // Ghi ƒë√® listener disconnect c≈© b·∫±ng listener m·ªõi c√≥ userId
          socket.removeAllListeners('disconnect'); // X√≥a listener disconnect m·∫∑c ƒë·ªãnh
          socket.on('disconnect', () => {
           // console.log(`üîå Socket disconnected: ${socket.id} for user ${userId}`);
            // Ch·ªâ x√≥a n·∫øu socketId v·∫´n l√† c·ªßa user n√†y (tr√°nh tr∆∞·ªùng h·ª£p k·∫øt n·ªëi l·∫°i nhanh)
            if (userSockets.get(userId) === socket.id) {
              userSockets.delete(userId);
             // console.log(`üßπ Cleaned up socket mapping for user ${userId}`);
            } else {
              //console.log(` Socket ${socket.id} disconnected, but user ${userId} has a newer socket.`);
            }
          });
        } else {
          //  console.warn(`‚ö†Ô∏è Attempted to register socket ${socket.id} without a userId.`);
        }
      });


    // X·ª≠ l√Ω chung khi ng·∫Øt k·∫øt n·ªëi (n·∫øu user ch∆∞a k·ªãp register)
    socket.on('disconnect', () => {
      //console.log(`üîå Socket disconnected: ${socket.id} (user not registered or already handled)`);
      // C√≥ th·ªÉ th√™m logic d·ªçn d·∫πp kh√°c n·∫øu c·∫ßn
    });
  });

  return io;
};

// Function to get the initialized io instance from other parts of the application
export const getIO = (): SocketIOServer => {
  if (!io) {
    throw new Error('Socket.IO not initialized! Ensure initializeSocket was called.');
  }
  return io;
};

// Function to get the user-socket map
export const getUserSockets = (): Map<string, string> => {
    return userSockets;
}; 