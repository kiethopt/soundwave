import { PrismaClient, Role, AlbumType } from '@prisma/client';
import bcrypt from 'bcrypt';
import dotenv from 'dotenv';

dotenv.config();

const prisma = new PrismaClient();

// Helper function to get genre IDs
async function getGenreIds(genreNames: string[]) {
  const genres = await prisma.genre.findMany({
    where: { name: { in: genreNames } },
    select: { id: true },
  });
  return genres.map((g) => g.id);
}

// Helper function to get label ID
async function getLabelId(labelName: string | null): Promise<string | null> {
  if (!labelName) return null;
  const label = await prisma.label.findUnique({
    where: { name: labelName },
    select: { id: true },
  });
  return label?.id ?? null;
}

// Helper function to convert MM:SS or M:SS string to seconds
function durationToSeconds(durationStr: string): number {
  const parts = durationStr.split(':').map(Number);
  if (parts.length === 2) {
    const minutes = parts[0];
    const seconds = parts[1];
    if (!isNaN(minutes) && !isNaN(seconds)) {
      return minutes * 60 + seconds;
    }
  }
  console.warn(`‚ö†Ô∏è Invalid duration format: ${durationStr}. Returning 0.`);
  return 0; // Default or throw error if strict parsing is needed
}

async function main() {
  try {
    console.log('üîÑ Starting basic database seeding...');
    const hashedPassword = await bcrypt.hash('123456', 10);
    const now = new Date();

    // === 1. Seed Genres ===
    console.log('üîÑ Seeding genres...');
    const genreNames = [
      'Pop',
      'Rock',
      'Hip-Hop',
      'R&B',
      'Electronic',
      'Jazz',
      'Classical',
      'Country',
      'Folk',
      'Soul',
      'Blues',
      'Indie',
      'Alternative',
      'Latin',
      'K-Pop',
      'V-Pop',
      'Rap',
      'Lo-fi',
      'Dance',
      'EDM',
      'Reggae',
      'Metal',
      'Punk',
      'Ambient',
      'House',
      'Techno',
      'Acoustic',
      'Ballad',
      'Funk',
      'New Wave',
      'Disco',
      'Trap',
      'Gospel',
      'Opera',
      'Orchestral',
      'Singer-Songwriter',
      'Experimental',
      'Instrumental',
      'World',
      'Bolero',
    ];
    await prisma.genre.createMany({
      data: genreNames.map((name) => ({ name })),
      skipDuplicates: true,
    });
    console.log('‚úÖ Genres seeded successfully.');

    // === 2. Seed Labels ===
    console.log('üîÑ Seeding labels...');
    const labelData = [
      {
        name: 'Universal Music Vietnam',
        description: 'Chi nh√°nh c·ªßa Universal Music Group t·∫°i Vi·ªát Nam...',
        logoUrl:
          'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743431554/labels/wzr1ktvlhz4iwosvumuo.svg',
      },
      {
        name: 'Warner Music Vietnam',
        description: 'Chi nh√°nh c·ªßa Warner Music Group t·∫°i Vi·ªát Nam...',
        logoUrl:
          'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743431554/labels/odz4yauhezy6jm9nwtq7.webp',
      },
      {
        name: 'Sony Music Vietnam',
        description: 'Chi nh√°nh c·ªßa Sony Music Entertainment t·∫°i Vi·ªát Nam...',
        logoUrl:
          'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743431553/labels/pu9on85wfnit81ctjl9m.png',
      },
      {
        name: 'SPACESPEAKERS LABEL',
        description: 'H√£ng thu √¢m ƒë·ªôc l·∫≠p do nh√≥m SpaceSpeakers th√†nh l·∫≠p...',
        logoUrl:
          'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743431554/labels/c0ihhauygdstdf4l2ihx.png',
      },
      {
        name: 'CIRCLE R',
        description: 'C√¥ng ty gi·∫£i tr√≠ v√† h√£ng thu √¢m...',
        logoUrl:
          'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743431553/labels/dkkhscf8gfzcgtwdzubo.jpg',
      },
      {
        name: 'M Music Records',
        description: 'H√£ng thu √¢m tr·ª±c thu·ªôc M-TP Entertainment...',
        logoUrl:
          'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743431553/labels/ypucskftannu0cckxf94.svg',
      },
      {
        name: 'CDSL',
        description: 'CDSL l√† m·ªôt t·∫≠p th·ªÉ ngh·ªá sƒ© tr·∫ª...',
        logoUrl:
          'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743431552/labels/z6lrmzvmgocit7epvchy.png',
      },
      {
        name: 'Yin Yang Media',
        description: 'ƒê∆°n v·ªã ƒë·ªìng h√†nh v√† h·ªó tr·ª£ cho c√°c ngh·ªá sƒ© Vi·ªát Nam...',
        logoUrl:
          'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743431554/labels/cxcdu3iidtfm752w2hte.png',
      },
      {
        name: 'DAO Entertainment',
        description: 'DAO Music Entertainment l√† c√¥ng ty ph√°t h√†nh...',
        logoUrl:
          'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743431552/labels/l9114e82ddiruwshqufq.png',
      },
      {
        name: 'Believe Digital',
        description:
          'C√¥ng ty c√¥ng ngh·ªá v√† d·ªãch v·ª• √¢m nh·∫°c k·ªπ thu·∫≠t s·ªë to√†n c·∫ßu...',
        logoUrl:
          'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743431552/labels/ykb5jpwhh5uxqc3gntxs.png',
      },
      {
        name: 'DreamS Entertainment',
        description: 'T·∫≠p ƒëo√†n Gi·∫£i tr√≠ & Truy·ªÅn th√¥ng Vi·ªát Nam...',
        logoUrl:
          'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743431553/labels/vwj1u97kvekl36yh4dbc.jpg',
      },
      {
        name: 'HYBE Labels',
        description: 'T·∫≠p ƒëo√†n gi·∫£i tr√≠ ƒëa qu·ªëc gia t·ª´ H√†n Qu·ªëc...',
        logoUrl:
          'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743431553/labels/ji2fmcjlwbinvqavlx3o.png',
      },
      {
        name: 'ƒê√¥ng T√¢y Promotion',
        description: 'C√¥ng ty truy·ªÅn th√¥ng v√† gi·∫£i tr√≠ h√†ng ƒë·∫ßu Vi·ªát Nam...',
        logoUrl:
          'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743431552/labels/aohzj3xpsp445v9pfpob.png',
      },
    ];
    for (const label of labelData) {
      await prisma.label.upsert({
        where: { name: label.name },
        update: {
          description: label.description,
          logoUrl: label.logoUrl || null,
        },
        create: {
          name: label.name,
          description: label.description,
          logoUrl: label.logoUrl || null,
        },
      });
    }
    console.log('‚úÖ Labels seeded successfully.');

    // === 3. Seed Admin Account ===
    console.log('üîÑ Seeding admin account...');
    await prisma.user.upsert({
      where: { email: 'admin@soundwave.com' },
      update: { isActive: true, role: Role.ADMIN },
      create: {
        email: 'admin@soundwave.com',
        username: 'admin',
        password: hashedPassword,
        name: 'System Administrator',
        role: Role.ADMIN,
        isActive: true,
      },
    });
    console.log('‚úÖ Admin account seeded successfully.');

    // === 4. Seed Artists, Albums, Tracks (Initial Set) ===
    console.log('üîÑ Seeding initial artists, albums, and tracks...');

    const artistsSeedData = [
      // --- V≈©. ---
      {
        user: { email: 'vu@soundwave.com', username: 'vu_artist', name: 'V≈©' },
        profile: {
          artistName: 'V≈©.',
          bio: 'Ho√†ng Th√°i V≈©, th∆∞·ªùng ƒë∆∞·ª£c bi·∫øt ƒë·∫øn v·ªõi ngh·ªá danh V≈©., l√† m·ªôt ca sƒ©, nh·∫°c sƒ© s√°ng t√°c ca kh√∫c ng∆∞·ªùi Vi·ªát Nam.',
          avatar:
            'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743439401/testAlbum/V%C5%A9/B%E1%BA%A3o%20T%C3%A0ng%20C%E1%BB%A7a%20Nu%E1%BB%91i%20Ti%E1%BA%BFc/btcckb2ct6jkeyzn5q9s.png',
          socialMediaLinks: {
            facebook: 'vumusic',
            instagram: 'vumusic.official',
          },
        },
        album: {
          title: 'B·∫£o T√†ng C·ªßa Nu·ªëi Ti·∫øc',
          coverUrl:
            'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743434878/testAlbum/V%C5%A9/B%E1%BA%A3o%20T%C3%A0ng%20C%E1%BB%A7a%20Nu%E1%BB%91i%20Ti%E1%BA%BFc/elnrlzd5dgkcl4euioqe.jpg',
          labelName: 'Warner Music Vietnam',
          genreNames: ['V-Pop', 'Ballad', 'Singer-Songwriter'],
          type: AlbumType.ALBUM,
          tracks: [
            {
              title: 'N·∫øu Nh·ªØng Ti·∫øc Nu·ªëi',
              audioUrl:
                'https://res.cloudinary.com/dsw1dm5ka/video/upload/v1743434824/testAlbum/V%C5%A9/B%E1%BA%A3o%20T%C3%A0ng%20C%E1%BB%A7a%20Nu%E1%BB%91i%20Ti%E1%BA%BFc/dfiktyddtxdxvfgj4dyg.mp3',
              trackNumber: 1,
              duration: 260,
            }, // 4:20
            {
              title: 'M√πa M∆∞a ·∫§y',
              audioUrl:
                'https://res.cloudinary.com/dsw1dm5ka/video/upload/v1743434777/testAlbum/V%C5%A9/B%E1%BA%A3o%20T%C3%A0ng%20C%E1%BB%A7a%20Nu%E1%BB%91i%20Ti%E1%BA%BFc/qtkjlfyq2qxj6yr0enn3.mp3',
              trackNumber: 2,
              duration: 228,
            }, // 3:48
            {
              title: 'Ng·ªìi Ch·ªù Trong V·∫•n V∆∞∆°ng',
              audioUrl:
                'https://res.cloudinary.com/dsw1dm5ka/video/upload/v1743434754/testAlbum/V%C5%A9/B%E1%BA%A3o%20T%C3%A0ng%20C%E1%BB%A7a%20Nu%E1%BB%91i%20Ti%E1%BA%BFc/axxycictkwiapoqlbgwv.mp3',
              trackNumber: 3,
              duration: 201,
            }, // 3:21
            {
              title: 'D√†nh H·∫øt Xu√¢n Th√¨ ƒê·ªÉ Ch·ªù Nhau',
              audioUrl:
                'https://res.cloudinary.com/dsw1dm5ka/video/upload/v1743434845/testAlbum/V%C5%A9/B%E1%BA%A3o%20T%C3%A0ng%20C%E1%BB%A7a%20Nu%E1%BB%91i%20Ti%E1%BA%BFc/rnqmok8sosnkawwdxz0d.mp3',
              trackNumber: 4,
              duration: 288,
            }, // 4:48
            {
              title: 'V√† Em S·∫Ω Lu√¥n L√† Ng∆∞·ªùi T√¥i Y√™u Nh·∫•t',
              audioUrl:
                'https://res.cloudinary.com/dsw1dm5ka/video/upload/v1743434797/testAlbum/V%C5%A9/B%E1%BA%A3o%20T%C3%A0ng%20C%E1%BB%A7a%20Nu%E1%BB%91i%20Ti%E1%BA%BFc/zy6xfmqzhjwirntwaaae.mp3',
              trackNumber: 5,
              duration: 257,
            }, // 4:17
            {
              title: 'Nh·ªØng Chuy·∫øn Bay',
              audioUrl:
                'https://res.cloudinary.com/dsw1dm5ka/video/upload/v1743434861/testAlbum/V%C5%A9/B%E1%BA%A3o%20T%C3%A0ng%20C%E1%BB%A7a%20Nu%E1%BB%91i%20Ti%E1%BA%BFc/lonb3cmtqmeugwzfcwtn.mp3',
              trackNumber: 6,
              duration: 273,
            }, // 4:33
            {
              title: 'M√¢y Kh√≥c V√¨ ƒêi·ªÅu G√¨',
              audioUrl:
                'https://res.cloudinary.com/dsw1dm5ka/video/upload/v1743434787/testAlbum/V%C5%A9/B%E1%BA%A3o%20T%C3%A0ng%20C%E1%BB%A7a%20Nu%E1%BB%91i%20Ti%E1%BA%BFc/oqqbltgfg82lhtqqhz9o.mp3',
              trackNumber: 7,
              duration: 214,
            }, // 3:34
            {
              title: 'Nh·ªØng L·ªùi H·ª©a B·ªè Qu√™n',
              audioUrl:
                'https://res.cloudinary.com/dsw1dm5ka/video/upload/v1743434756/testAlbum/V%C5%A9/B%E1%BA%A3o%20T%C3%A0ng%20C%E1%BB%A7a%20Nu%E1%BB%91i%20Ti%E1%BA%BFc/auuktbf2dboi0i1kjlzl.mp3',
              trackNumber: 8,
              duration: 236,
            }, // 3:56
            {
              title: 'Kh√¥ng Y√™u Em Th√¨ Y√™u Ai',
              audioUrl:
                'https://res.cloudinary.com/dsw1dm5ka/video/upload/v1743434791/testAlbum/V%C5%A9/B%E1%BA%A3o%20T%C3%A0ng%20C%E1%BB%A7a%20Nu%E1%BB%91i%20Ti%E1%BA%BFc/glvb7rydfc9xmsoehnwq.mp3',
              trackNumber: 9,
              duration: 232,
            }, // 3:52
            {
              title: 'b√¨nh y√™n',
              audioUrl:
                'https://res.cloudinary.com/dsw1dm5ka/video/upload/v1743434776/testAlbum/V%C5%A9/B%E1%BA%A3o%20T%C3%A0ng%20C%E1%BB%A7a%20Nu%E1%BB%91i%20Ti%E1%BA%BFc/myyqqjyhofy8pzetplpc.mp3',
              trackNumber: 10,
              duration: 201,
            }, // 3:21
          ],
        },
      },
      // --- Shiki ---
      {
        user: {
          email: 'shiki@soundwave.com',
          username: 'shiki_artist',
          name: 'Shiki',
        },
        profile: {
          artistName: 'Shiki',
          bio: 'Shiki t√™n th·∫≠t l√† Tr·∫ßn Duy T√πng, l√† m·ªôt ngh·ªá sƒ© tr·∫ª ƒëa t√†i trong c·ªông ƒë·ªìng nh·∫°c Indie/Lo-fi Vi·ªát Nam.',
          avatar:
            'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743439433/testAlbum/Shiki/L%E1%BA%B7ng/hkbmzyo4vngqrrdmb0az.webp',
          socialMediaLinks: {
            facebook: 'shiki.official',
            instagram: 'shiki.official',
          },
        },
        album: {
          title: 'L·∫∑ng',
          coverUrl:
            'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743436315/testAlbum/Shiki/L%E1%BA%B7ng/c4n2z5lw7j38cevdcjwn.jpg',
          labelName: 'CDSL',
          genreNames: ['V-Pop', 'Lo-fi', 'Indie'],
          type: AlbumType.ALBUM,
          tracks: [
            {
              title: '1000 √Ånh M·∫Øt',
              audioUrl:
                'https://res.cloudinary.com/dsw1dm5ka/video/upload/v1743436373/testAlbum/Shiki/L%E1%BA%B7ng/rigndjyu6sha8qudao4d.mp3',
              trackNumber: 1,
              duration: 152,
            }, // 2:32
            {
              title: 'Anh V·∫´n ƒê·ª£i',
              audioUrl:
                'https://res.cloudinary.com/dsw1dm5ka/video/upload/v1743436465/testAlbum/Shiki/L%E1%BA%B7ng/i6hmq7l3hdqvbxu5e28r.mp3',
              trackNumber: 2,
              duration: 152,
            }, // 2:32
            {
              title: 'C√≥ ƒê√¥i ƒêi·ªÅu',
              audioUrl:
                'https://res.cloudinary.com/dsw1dm5ka/video/upload/v1743436588/testAlbum/Shiki/L%E1%BA%B7ng/qxklb5cw51whc4isrc0q.mp3',
              trackNumber: 3,
              duration: 174,
            }, // 2:54
            {
              title: 'L·∫∑ng',
              audioUrl:
                'https://res.cloudinary.com/dsw1dm5ka/video/upload/v1743436725/testAlbum/Shiki/L%E1%BA%B7ng/sgvcaztihnxys4q8jiwf.mp3',
              trackNumber: 4,
              duration: 196,
            }, // 3:16
            {
              title: 'Night Time',
              audioUrl:
                'https://res.cloudinary.com/dsw1dm5ka/video/upload/v1743436782/testAlbum/Shiki/L%E1%BA%B7ng/zqwu8zxop4btjefhmegl.mp3',
              trackNumber: 5,
              duration: 228,
            }, // 3:48
            {
              title: 'Perfect',
              audioUrl:
                'https://res.cloudinary.com/dsw1dm5ka/video/upload/v1743436825/testAlbum/Shiki/L%E1%BA%B7ng/odtql92weapv0vu7cwch.mp3',
              trackNumber: 6,
              duration: 188,
            }, // 3:08
            {
              title: 'Take Off Your Hands',
              audioUrl:
                'https://res.cloudinary.com/dsw1dm5ka/video/upload/v1743436987/testAlbum/Shiki/L%E1%BA%B7ng/wxsbjznbjgpkgbma1rhr.mp3',
              trackNumber: 7,
              duration: 204,
            }, // 3:24
          ],
        },
      },
      // --- tlinh (No album here, featured in Low G's) ---
      {
        user: {
          email: 'tlinh@soundwave.com',
          username: 'tlinh_artist',
          name: 'tlinh',
        },
        profile: {
          artistName: 'tlinh',
          bio: 'tlinh t√™n th·∫≠t l√† Nguy·ªÖn Th·∫£o Linh, l√† m·ªôt n·ªØ rapper, ca sƒ© v√† nh·∫°c sƒ© ng∆∞·ªùi Vi·ªát Nam. C√¥ ƒë∆∞·ª£c bi·∫øt ƒë·∫øn sau khi tham gia ch∆∞∆°ng tr√¨nh Rap Vi·ªát m√πa 1.',
          avatar:
            'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743439252/testAlbum/tlinh%2C%20Low%20G/FLVR/yhujw5bifxyhncqddgiw.png',
          socialMediaLinks: {
            instagram: 'thaylinhhomnay',
            facebook: 'tlinh.official',
          },
        },
        // No album defined here
      },
      // --- Low G (with tlinh featured) ---
      {
        user: {
          email: 'lowg@soundwave.com',
          username: 'lowg_artist',
          name: 'Low G',
        },
        profile: {
          artistName: 'Low G',
          bio: 'Low G t√™n th·∫≠t l√† Nguy·ªÖn Ho√†ng Long, l√† m·ªôt rapper ng∆∞·ªùi Vi·ªát Nam. Anh ƒë∆∞·ª£c bi·∫øt ƒë·∫øn v·ªõi phong c√°ch rap ƒë·ªôc ƒë√°o v√† k·ªπ thu·∫≠t t·ªët.',
          avatar:
            'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743439236/testAlbum/tlinh%2C%20Low%20G/FLVR/fwt1lfhfrzqq6dchl8nw.jpg',
          socialMediaLinks: {
            facebook: 'lowgthapsang',
            instagram: 'lowgthapsang',
          },
        },
        album: {
          title: 'FLVR',
          coverUrl:
            'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743437224/testAlbum/tlinh%2C%20Low%20G/FLVR/oxz6tyeukjvo9lkcfw51.jpg',
          labelName: 'SPACESPEAKERS LABEL',
          genreNames: ['V-Pop', 'Hip-Hop', 'Rap'],
          type: AlbumType.EP,
          featuredArtistNames: ['tlinh'], // tlinh is the featured artist for the whole EP in this example
          tracks: [
            {
              title: 'D√ÇU T·∫∞M',
              audioUrl:
                'https://res.cloudinary.com/dsw1dm5ka/video/upload/v1743437229/testAlbum/tlinh%2C%20Low%20G/FLVR/bgsotddidlfj6zrzbtyn.mp3',
              trackNumber: 1,
              duration: 160,
            }, // 2:40
            {
              title: 'NG√ÇN',
              audioUrl:
                'https://res.cloudinary.com/dsw1dm5ka/video/upload/v1743437334/testAlbum/tlinh%2C%20Low%20G/FLVR/ntlvaidfotjbmw9rxg3z.mp3',
              trackNumber: 2,
              duration: 158,
            }, // 2:38
            {
              title: 'HOP ON DA SHOW',
              audioUrl:
                'https://res.cloudinary.com/dsw1dm5ka/video/upload/v1743437358/testAlbum/tlinh%2C%20Low%20G/FLVR/pgdrfb8oux5ub958hrvf.mp3',
              trackNumber: 3,
              duration: 175,
            }, // 2:55
            {
              title: 'PH√ìNG Z√åN Z√åN',
              audioUrl:
                'https://res.cloudinary.com/dsw1dm5ka/video/upload/v1743437384/testAlbum/tlinh%2C%20Low%20G/FLVR/vqv3bigkrhgob2diijnu.mp3',
              trackNumber: 4,
              duration: 203,
            }, // 3:23
          ],
        },
      },
      // --- itsnk (Needed for Wren Evans feature) ---
      {
        user: {
          email: 'itsnk@soundwave.com',
          username: 'itsnk_artist',
          name: 'itsnk',
        },
        profile: {
          artistName: 'itsnk',
          bio: 'itsnk l√† m·ªôt ngh·ªá sƒ©/producer √¢m nh·∫°c tr·∫ª t√†i nƒÉng.',
          avatar: null, // Add avatar URL if available
          socialMediaLinks: {},
        },
        // No album
      },
      // --- Wren Evans ---
      {
        user: {
          email: 'wrenevans@soundwave.com',
          username: 'wrenevans_artist',
          name: 'Wren Evans',
        },
        profile: {
          artistName: 'Wren Evans',
          bio: 'Wren Evans t√™n th·∫≠t l√† L√™ Phan, l√† m·ªôt ca sƒ©, nh·∫°c sƒ©, nh√† s·∫£n xu·∫•t √¢m nh·∫°c ng∆∞·ªùi Vi·ªát Nam.',
          avatar:
            'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743442570/testAlbum/Wren%20Evans/T%E1%BB%ABng%20Quen/wzrdd9fi2qihaqihoiro.jpg', // Use one of the single covers or a dedicated avatar
          socialMediaLinks: {
            instagram: 'wrenevansmusic',
            facebook: 'wrenevansmusic',
          },
        },
        // No album, singles will be seeded separately
      },
      // --- Phan ƒê√¨nh T√πng ---
      {
        user: {
          email: 'phandinhtung@soundwave.com',
          username: 'phandinhtung_artist',
          name: 'Phan ƒê√¨nh T√πng',
        },
        profile: {
          artistName: 'Phan ƒê√¨nh T√πng',
          bio: 'Phan ƒê√¨nh T√πng l√† m·ªôt ca sƒ©, nh·∫°c sƒ© n·ªïi ti·∫øng ng∆∞·ªùi Vi·ªát Nam, c·ª±u th√†nh vi√™n nh√≥m nh·∫°c MTV.',
          avatar:
            'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743442756/testAlbum/Phan%20%C4%90inh%20T%C3%B9ng/Kh%C3%BAc%20H%C3%A1t%20M%E1%BB%ABng%20Sinh%20Nh%E1%BA%ADt/Kh%C3%BAc%20H%C3%A1t%20M%E1%BB%ABng%20Sinh%20Nh%E1%BA%ADt/tomj0zyas6grk3zft230.jpg', // Use single cover or dedicated avatar
          socialMediaLinks: { facebook: 'phandinhtung.singer' },
        },
        // No album, single will be seeded separately
      },
    ];

    const artistProfilesMap = new Map<string, string>(); // Map artistName to artistId

    // Seed Users and Artist Profiles
    for (const artistData of artistsSeedData) {
      const user = await prisma.user.upsert({
        where: { email: artistData.user.email },
        update: {
          name: artistData.user.name,
          username: artistData.user.username,
          avatar: artistData.profile.avatar,
        },
        create: {
          ...artistData.user,
          avatar: artistData.profile.avatar,
          password: hashedPassword,
          isActive: true,
          role: Role.USER,
        },
      });

      const artistProfile = await prisma.artistProfile.upsert({
        where: { userId: user.id },
        update: {
          ...artistData.profile,
          isVerified: true,
          isActive: true,
          verifiedAt: now,
        },
        create: {
          ...artistData.profile,
          userId: user.id,
          role: Role.ARTIST,
          isVerified: true,
          isActive: true,
          verifiedAt: now,
          createdAt: now,
          updatedAt: now,
        },
      });
      artistProfilesMap.set(artistProfile.artistName, artistProfile.id);
      console.log(`‚úÖ Seeded User & Artist: ${artistData.profile.artistName}`);
    }

    // Seed Albums and Tracks associated with Albums
    for (const artistData of artistsSeedData) {
      if (!artistData.album) continue; // Skip artists without an album defined here

      const artistId = artistProfilesMap.get(artistData.profile.artistName);
      if (!artistId) {
        console.warn(
          `‚ö†Ô∏è Could not find artistId for ${artistData.profile.artistName}. Skipping album.`
        );
        continue;
      }

      const albumLabelId = await getLabelId(artistData.album.labelName);
      const albumGenreIds = await getGenreIds(artistData.album.genreNames);
      const totalTracks = artistData.album.tracks.length;
      const albumDuration = artistData.album.tracks.reduce(
        (sum, track) => sum + (track.duration ?? 0),
        0
      );

      const album = await prisma.album.upsert({
        where: { title_artistId: { title: artistData.album.title, artistId } },
        update: {
          coverUrl: artistData.album.coverUrl,
          labelId: albumLabelId,
          type: artistData.album.type,
          isActive: true,
          totalTracks: totalTracks,
          duration: albumDuration,
          genres: {
            deleteMany: {},
            create: albumGenreIds.map((genreId) => ({ genreId })),
          },
        },
        create: {
          title: artistData.album.title,
          coverUrl: artistData.album.coverUrl,
          releaseDate: now,
          duration: albumDuration,
          totalTracks: totalTracks,
          type: artistData.album.type,
          isActive: true,
          artistId: artistId,
          labelId: albumLabelId,
          createdAt: now,
          updatedAt: now,
          genres: { create: albumGenreIds.map((genreId) => ({ genreId })) },
        },
      });
      console.log(
        `‚úÖ Seeded Album: ${album.title} by ${artistData.profile.artistName}`
      );

      // Find featured artist IDs mentioned for the whole album
      const albumFeaturedArtistIds = (
        artistData.album.featuredArtistNames ?? []
      )
        .map((name) => artistProfilesMap.get(name))
        .filter((id): id is string => !!id);

      for (const trackData of artistData.album.tracks) {
        const track = await prisma.track.upsert({
          // Use a combination of title and main artistId as unique identifier
          where: { title_artistId: { title: trackData.title, artistId } },
          update: {
            audioUrl: trackData.audioUrl,
            trackNumber: trackData.trackNumber,
            coverUrl: album.coverUrl, // Use album cover for album tracks
            duration: trackData.duration,
            isActive: true,
            type: album.type,
            labelId: albumLabelId,
            genres: {
              deleteMany: {},
              create: albumGenreIds.map((genreId) => ({ genreId })), // Inherit genres from album
            },
          },
          create: {
            title: trackData.title,
            duration: trackData.duration,
            releaseDate: now,
            trackNumber: trackData.trackNumber,
            coverUrl: album.coverUrl, // Use album cover for album tracks
            audioUrl: trackData.audioUrl,
            playCount: 0,
            type: album.type,
            isActive: true,
            artistId: artistId, // Main artist
            albumId: album.id, // Link to the album
            labelId: albumLabelId,
            createdAt: now,
            updatedAt: now,
            genres: { create: albumGenreIds.map((genreId) => ({ genreId })) }, // Inherit genres from album
          },
        });

        // Add featured artists for this specific track (if any defined at album level)
        // You could extend trackData to include track-specific features if needed
        if (albumFeaturedArtistIds.length > 0) {
          await prisma.trackArtist.createMany({
            data: albumFeaturedArtistIds.map((featArtistId) => ({
              trackId: track.id,
              artistId: featArtistId,
            })),
            skipDuplicates: true, // Avoid errors if already featured
          });
        }
      }
      console.log(`‚úÖ Seeded ${totalTracks} Tracks for Album: ${album.title}`);
    }
    console.log(
      '‚úÖ Initial artists, albums, and album tracks seeded successfully.'
    );

    // === 5. Seed Standalone Singles ===
    console.log('üîÑ Seeding standalone singles...');
    const singlesSeedData = [
      // V≈©.'s Single
      {
        artistName: 'V≈©.',
        title: 'V√¨ Anh ƒê√¢u C√≥ Bi·∫øt',
        duration: '4:01',
        coverUrl:
          'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743442415/testAlbum/V%C5%A9/V%C3%AC%20Anh%20%C4%90%C3%A2u%20C%C3%B3%20Bi%E1%BA%BFt/frou2hv5xqhghbnlervy.jpg',
        audioUrl:
          'https://res.cloudinary.com/dsw1dm5ka/video/upload/v1743442420/testAlbum/V%C5%A9/V%C3%AC%20Anh%20%C4%90%C3%A2u%20C%C3%B3%20Bi%E1%BA%BFt/w6t3yuq960odthomqphq.mp3',
        genreNames: ['V-Pop', 'Ballad'], // Example genres
        labelName: 'Warner Music Vietnam', // Use V≈©.'s label
        featuredArtistNames: [],
        playCount: 100, // Add a play count to ensure it appears in search results
      },
      // Wren Evans' Singles
      {
        artistName: 'Wren Evans',
        title: 'T·ª´ng Quen',
        duration: '2:54',
        coverUrl:
          'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743442570/testAlbum/Wren%20Evans/T%E1%BB%ABng%20Quen/wzrdd9fi2qihaqihoiro.jpg',
        audioUrl:
          'https://res.cloudinary.com/dsw1dm5ka/video/upload/v1743442574/testAlbum/Wren%20Evans/T%E1%BB%ABng%20Quen/c603qnanwdwodfrrc5xr.mp3',
        genreNames: ['V-Pop', 'Hip-Hop'], // Example genres
        labelName: null, // No label specified
        featuredArtistNames: ['itsnk'], // Feature itsnk
        playCount: 80, // Add a play count to ensure it appears in search results
      },
      {
        artistName: 'Wren Evans',
        title: 'ƒê·ªÉ √ù',
        duration: '2:39',
        coverUrl:
          'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743442569/testAlbum/Wren%20Evans/%C4%90%E1%BB%83%20%C3%9D/dkziecvuunuibpmipxfs.jpg',
        audioUrl:
          'https://res.cloudinary.com/dsw1dm5ka/video/upload/v1743442576/testAlbum/Wren%20Evans/%C4%90%E1%BB%83%20%C3%9D/cdiz4wskknjr4hxtdpn6.mp3',
        genreNames: ['V-Pop', 'R&B'], // Example genres
        labelName: null,
        featuredArtistNames: [],
        playCount: 75, // Add a play count to ensure it appears in search results
      },
      // Phan ƒê√¨nh T√πng's Single
      {
        artistName: 'Phan ƒê√¨nh T√πng',
        title: 'Kh√∫c H√°t M·ª´ng Sinh Nh·∫≠t',
        duration: '3:29',
        coverUrl:
          'https://res.cloudinary.com/dsw1dm5ka/image/upload/v1743442756/testAlbum/Phan%20%C4%90inh%20T%C3%B9ng/Kh%C3%BAc%20H%C3%A1t%20M%E1%BB%ABng%20Sinh%20Nh%E1%BA%ADt/Kh%C3%BAc%20H%C3%A1t%20M%E1%BB%ABng%20Sinh%20Nh%E1%BA%ADt/tomj0zyas6grk3zft230.jpg',
        audioUrl:
          'https://res.cloudinary.com/dsw1dm5ka/video/upload/v1743442668/testAlbum/Phan%20%C4%90inh%20T%C3%B9ng/Kh%C3%BAc%20H%C3%A1t%20M%E1%BB%ABng%20Sinh%20Nh%E1%BA%ADt/Kh%C3%BAc%20H%C3%A1t%20M%E1%BB%ABng%20Sinh%20Nh%E1%BA%ADt/qrm9ovig9ezxdpsysdwj.mp3',
        genreNames: ['V-Pop', 'Pop'], // Example genres
        labelName: null,
        featuredArtistNames: [],
        playCount: 90, // Add a play count to ensure it appears in search results
      },
    ];

    for (const singleData of singlesSeedData) {
      const artistId = artistProfilesMap.get(singleData.artistName);
      if (!artistId) {
        console.warn(
          `‚ö†Ô∏è Could not find artistId for ${singleData.artistName} while seeding single "${singleData.title}". Skipping.`
        );
        continue;
      }

      const singleLabelId = await getLabelId(singleData.labelName);
      const singleGenreIds = await getGenreIds(singleData.genreNames);
      const singleDuration = durationToSeconds(singleData.duration);

      // Find featured artist IDs for this single
      const featuredArtistIds = singleData.featuredArtistNames
        .map((name) => artistProfilesMap.get(name))
        .filter((id): id is string => {
          if (!id)
            console.warn(
              `‚ö†Ô∏è Could not find featured artist ID for "${name}" on single "${singleData.title}".`
            );
          return !!id;
        });

      // Create the single track
      const track = await prisma.track.upsert({
        where: { title_artistId: { title: singleData.title, artistId } }, // Unique constraint
        update: {
          duration: singleDuration,
          coverUrl: singleData.coverUrl,
          audioUrl: singleData.audioUrl,
          isActive: true,
          type: AlbumType.SINGLE,
          albumId: null, // Explicitly null for singles
          labelId: singleLabelId,
          playCount: singleData.playCount || 0, // Use the play count from the data
          genres: {
            deleteMany: {}, // Ensure genres are updated if track exists
            create: singleGenreIds.map((genreId) => ({ genreId })),
          },
        },
        create: {
          title: singleData.title,
          duration: singleDuration,
          releaseDate: now,
          trackNumber: null, // Singles don't typically have track numbers
          coverUrl: singleData.coverUrl,
          audioUrl: singleData.audioUrl,
          playCount: singleData.playCount || 0, // Use the play count from the data
          type: AlbumType.SINGLE,
          isActive: true,
          artistId: artistId, // Main artist
          albumId: null, // No album link
          labelId: singleLabelId,
          createdAt: now,
          updatedAt: now,
          genres: { create: singleGenreIds.map((genreId) => ({ genreId })) },
        },
      });
      console.log(
        `‚úÖ Seeded Single: "${track.title}" by ${singleData.artistName}`
      );

      // Link featured artists if any
      if (featuredArtistIds.length > 0) {
        await prisma.trackArtist.createMany({
          data: featuredArtistIds.map((featArtistId) => ({
            trackId: track.id,
            artistId: featArtistId,
          })),
          skipDuplicates: true, // Avoid errors if feature link already exists
        });
        console.log(
          `   -> Added features: ${singleData.featuredArtistNames.join(', ')}`
        );
      }
    }
    console.log('‚úÖ Standalone singles seeded successfully.');

    console.log('üéâ Basic database seeding completed!');
  } catch (error) {
    console.error('‚ùå Error during seeding:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
    console.log('üîå Prisma client disconnected.');
  }
}

main();
