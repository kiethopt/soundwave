generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String          @id @default(cuid())
  email                String          @unique
  username             String?         @unique
  password             String
  name                 String?
  avatar               String?
  role                 Role            @default(USER)
  currentProfile       String          @default("USER")
  isActive             Boolean         @default(true)
  followVisibility     Boolean         @default(true)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  lastLoginAt          DateTime?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  artistProfile        ArtistProfile?
  history              History[]
  notifications        Notification[]  @relation("UserNotifications")
  playlists            Playlist[]
  followed             UserFollow[]    @relation("Follower")
  followers            UserFollow[]    @relation("FollowingUser")
  likedTracks          UserLikeTrack[]

  @@unique([email, username])
  @@index([email])
  @@index([username])
  @@index([role])
  @@index([isActive])
  @@index([createdAt])
  @@map("users")
}

model ArtistProfile {
  id                      String         @id @default(cuid())
  artistName              String         @unique
  bio                     String?
  avatar                  String?
  artistBanner            String?
  role                    Role           @default(ARTIST)
  socialMediaLinks        Json?
  monthlyListeners        Int            @default(0)
  isVerified              Boolean        @default(false)
  isActive                Boolean        @default(true)
  verificationRequestedAt DateTime?
  verifiedAt              DateTime?
  requestedLabelName      String?
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  userId                  String         @unique
  labelId                 String?        // Foreign key for Label
  albums                  Album[]
  genres                  ArtistGenre[]
  user                    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  label                   Label?         @relation(fields: [labelId], references: [id], onDelete: SetNull) // Relation to Label
  notifications           Notification[] @relation("ArtistNotifications")
  TrackArtist             TrackArtist[]
  tracks                  Track[]
  followers               UserFollow[]   @relation("FollowingArtist")

  @@index([artistName])
  @@index([isVerified])
  @@index([verifiedAt])
  @@index([labelId])
  @@map("artist_profiles")
}

model ArtistGenre {
  id            String        @id @default(cuid())
  artistId      String
  genreId       String
  createdAt     DateTime      @default(now())
  artistProfile ArtistProfile @relation(fields: [artistId], references: [id], onDelete: Cascade)
  genre         Genre         @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@unique([artistId, genreId])
  @@map("artist_genre")
}

model Label {
  id          String   @id @default(cuid())
  name        String   @unique
  logoUrl     String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tracks      Track[]
  albums      Album[]
  artists     ArtistProfile[] // Relation back to ArtistProfile

  @@map("labels")
}

model Album {
  id          String        @id @default(cuid())
  title       String
  coverUrl    String?
  releaseDate DateTime
  duration    Int           @default(0)
  totalTracks Int           @default(0)
  type        AlbumType     @default(ALBUM)
  isActive    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  artistId    String
  genres      AlbumGenre[]
  artist      ArtistProfile @relation(fields: [artistId], references: [id], onDelete: Cascade)
  tracks      Track[]
  labelId     String?
  label       Label?        @relation(fields: [labelId], references: [id], onDelete: SetNull)
  notifications Notification[]

  @@unique([title, artistId])
  @@index([title])
  @@index([artistId])
  @@index([releaseDate])
  @@index([isActive])
  @@index([createdAt])
  @@index([labelId])
  @@map("albums")
}

model Track {
  id              String          @id @default(cuid())
  title           String
  duration        Int             @default(0)
  releaseDate     DateTime
  trackNumber     Int?
  coverUrl        String?
  audioUrl        String
  playCount       Int             @default(0)
  type            AlbumType       @default(SINGLE)
  isActive        Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  artistId        String
  albumId         String?
  history         History[]
  playlists       PlaylistTrack[]
  featuredArtists TrackArtist[]
  genres          TrackGenre[]
  album           Album?          @relation(fields: [albumId], references: [id], onDelete: Cascade)
  artist          ArtistProfile   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  likedBy         UserLikeTrack[]
  labelId         String?
  label           Label?          @relation(fields: [labelId], references: [id], onDelete: SetNull)
  notifications   Notification[]

  @@unique([title, artistId])
  @@index([title])
  @@index([artistId])
  @@index([albumId])
  @@index([playCount])
  @@index([releaseDate])
  @@index([isActive])
  @@index([createdAt])
  @@index([labelId])
  @@map("tracks")
}

model History {
  id        String      @id @default(cuid())
  type      HistoryType
  query     String?
  duration  Int?
  completed Boolean?
  playCount Int?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  trackId   String?
  userId    String
  track     Track?      @relation(fields: [trackId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, trackId, type])
  @@index([userId])
  @@index([type])
  @@index([trackId])
  @@index([createdAt])
  @@index([playCount])
  @@map("histories")
}

model Playlist {
  id              String          @id @default(cuid())
  name            String
  description     String?
  coverUrl        String?
  privacy         PlaylistPrivacy @default(PRIVATE)
  type            PlaylistType    @default(NORMAL)
  isAIGenerated   Boolean         @default(false)
  totalTracks     Int             @default(0)
  totalDuration   Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userId          String? // Cho phép null để lưu playlist hệ thống
  user            User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tracks          PlaylistTrack[]
  lastGeneratedAt DateTime? // Theo dõi lần tạo AI gần nhất

  @@index([userId])
  @@index([privacy])
  @@index([type])
  @@index([isAIGenerated])
  @@map("playlists")
}

model Genre {
  id             String        @id @default(cuid())
  name           String        @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  albums         AlbumGenre[]
  artistProfiles ArtistGenre[]
  tracks         TrackGenre[]

  @@index([name])
  @@map("genres")
}

model Notification {
  id            String           @id @default(cuid())
  type          NotificationType
  message       String
  isRead        Boolean          @default(false)
  recipientType RecipientType
  userId        String?
  artistId      String?
  senderId      String?
  trackId       String?
  albumId       String?
  count         Int?             @default(1)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  artist        ArtistProfile?   @relation("ArtistNotifications", fields: [artistId], references: [id], onDelete: Cascade)
  user          User?            @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  track         Track?           @relation(fields: [trackId], references: [id], onDelete: SetNull)
  album         Album?           @relation(fields: [albumId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([artistId])
  @@index([senderId])
  @@index([trackId])
  @@index([albumId])
  @@index([createdAt])
  @@map("notifications")
}

model UserFollow {
  id                String         @id @default(cuid())
  followerId        String
  followingUserId   String?
  followingArtistId String?
  followingType     FollowingType
  createdAt         DateTime       @default(now())
  follower          User           @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followingArtist   ArtistProfile? @relation("FollowingArtist", fields: [followingArtistId], references: [id], onDelete: Cascade)
  followingUser     User?          @relation("FollowingUser", fields: [followingUserId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingUserId, followingType])
  @@unique([followerId, followingArtistId, followingType])
  @@index([followerId])
  @@index([followingUserId])
  @@index([followingArtistId])
  @@map("user_follow")
}

model AlbumGenre {
  id        String   @id @default(cuid())
  albumId   String
  genreId   String
  createdAt DateTime @default(now())
  album     Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)
  genre     Genre    @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@unique([albumId, genreId])
  @@index([albumId])
  @@index([genreId])
  @@map("album_genre")
}

model TrackGenre {
  id        String   @id @default(cuid())
  trackId   String
  genreId   String
  createdAt DateTime @default(now())
  genre     Genre    @relation(fields: [genreId], references: [id], onDelete: Cascade)
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([trackId, genreId])
  @@index([trackId])
  @@index([genreId])
  @@map("track_genre")
}

model TrackArtist {
  id            String        @id @default(cuid())
  trackId       String
  artistId      String
  createdAt     DateTime      @default(now())
  artistProfile ArtistProfile @relation(fields: [artistId], references: [id], onDelete: Cascade)
  track         Track         @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([trackId, artistId])
  @@index([trackId])
  @@index([artistId])
  @@map("track_artist")
}

model PlaylistTrack {
  id         String   @id @default(cuid())
  playlistId String
  trackId    String
  addedAt    DateTime @default(now())
  trackOrder Int
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  track      Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([playlistId, trackId])
  @@index([playlistId])
  @@index([trackId])
  @@map("playlist_track")
}

model UserLikeTrack {
  id        String   @id @default(cuid())
  userId    String
  trackId   String
  createdAt DateTime @default(now())
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, trackId])
  @@index([userId])
  @@index([trackId])
  @@map("user_like_track")
}

enum Role {
  USER
  ARTIST
  ADMIN
}

enum AlbumType {
  ALBUM
  EP
  SINGLE
}

enum HistoryType {
  SEARCH
  PLAY
}

enum PlaylistPrivacy {
  PUBLIC
  PRIVATE
}

enum PlaylistType {
  FAVORITE
  NORMAL
  SYSTEM
}

enum NotificationType {
  NEW_TRACK
  NEW_ALBUM
  NEW_FOLLOW
  ARTIST_REQUEST_APPROVE
  ARTIST_REQUEST_REJECT
  ACCOUNT_ACTIVATED
  ACCOUNT_DEACTIVATED
}

enum FollowingType {
  USER
  ARTIST
}

enum RecipientType {
  USER
  ARTIST
}
