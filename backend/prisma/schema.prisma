generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                     @id @default(cuid())
  email                 String                     @unique
  username              String?                    @unique
  password              String
  name                  String?
  avatar                String?
  role                  Role                       @default(USER)
  currentProfile        String                     @default("USER")
  isActive              Boolean                    @default(true)
  followVisibility      Boolean                    @default(true)
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  lastLoginAt           DateTime?
  passwordResetToken    String?
  passwordResetExpires  DateTime?
  artistProfile         ArtistProfile?
  history               History[]
  notifications         Notification[]             @relation("UserNotifications")
  playlists             Playlist[]
  followed              UserFollow[]               @relation("Follower")
  followers             UserFollow[]               @relation("FollowingUser")
  likedTracks           UserLikeTrack[]
  submittedClaims       ArtistClaimRequest[]       @relation("ClaimingUser")
  reviewedClaims        ArtistClaimRequest[]       @relation("ReviewingAdmin")
  submittedReports      Report[]                   @relation("UserReports")
  resolvedReports       Report[]                   @relation("AdminResolutions")
  reviewedLabelRequests LabelRegistrationRequest[] @relation("AdminReviewedLabelRequests")
  artistRequests        ArtistRequest[]

  @@unique([email, username])
  @@index([email])
  @@index([username])
  @@index([role])
  @@index([isActive])
  @@index([createdAt])
  @@map("users")
}

model ArtistProfile {
  id                        String                     @id @default(cuid())
  artistName                String                     @unique
  bio                       String?
  avatar                    String?
  artistBanner              String?
  role                      Role                       @default(ARTIST)
  socialMediaLinks          Json?
  monthlyListeners          Int                        @default(0)
  isVerified                Boolean                    @default(false)
  isActive                  Boolean                    @default(true)
  verificationRequestedAt   DateTime?
  verifiedAt                DateTime?
  requestedLabelName        String?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  userId                    String?                    @unique
  labelId                   String?
  albums                    Album[]
  genres                    ArtistGenre[]
  user                      User?                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  label                     Label?                     @relation(fields: [labelId], references: [id], onDelete: SetNull)
  notifications             Notification[]             @relation("ArtistNotifications")
  tracks                    Track[]
  featuredInTracks          TrackArtist[]              @relation("FeaturedArtistRelation")
  followers                 UserFollow[]               @relation("FollowingArtist")
  claimRequests             ArtistClaimRequest[]       @relation("ClaimedProfile")
  labelRegistrationRequests LabelRegistrationRequest[] @relation("LabelRequestsByArtist")

  @@index([artistName])
  @@index([isVerified])
  @@index([verifiedAt])
  @@index([labelId])
  @@index([userId])
  @@map("artist_profiles")
}

model ArtistGenre {
  id            String        @id @default(cuid())
  artistId      String
  genreId       String
  createdAt     DateTime      @default(now())
  artistProfile ArtistProfile @relation(fields: [artistId], references: [id], onDelete: Cascade)
  genre         Genre         @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@unique([artistId, genreId])
  @@map("artist_genre")
}

model Label {
  id                  String                    @id @default(cuid())
  name                String                    @unique
  logoUrl             String?
  description         String?
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  tracks              Track[]
  albums              Album[]
  artists             ArtistProfile[]
  registrationRequest LabelRegistrationRequest?

  @@map("labels")
}

model Album {
  id            String         @id @default(cuid())
  title         String
  coverUrl      String?
  releaseDate   DateTime
  duration      Int            @default(0)
  totalTracks   Int            @default(0)
  type          AlbumType      @default(ALBUM)
  isActive      Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  artistId      String
  genres        AlbumGenre[]
  artist        ArtistProfile  @relation(fields: [artistId], references: [id], onDelete: Cascade)
  tracks        Track[]
  labelId       String?
  label         Label?         @relation(fields: [labelId], references: [id], onDelete: SetNull)
  notifications Notification[]
  reports       Report[]

  @@unique([title, artistId])
  @@index([title])
  @@index([artistId])
  @@index([releaseDate])
  @@index([isActive])
  @@index([createdAt])
  @@index([labelId])
  @@map("albums")
}

model Track {
  id              String          @id @default(cuid())
  title           String
  duration        Int             @default(0)
  releaseDate     DateTime
  trackNumber     Int?
  coverUrl        String?
  audioUrl        String
  playCount       Int             @default(0)
  type            AlbumType       @default(SINGLE)
  isActive        Boolean         @default(false)
  tempo           Int? // Added tempo field
  mood            String? // Added mood field (e.g., Happy, Sad, Energetic)
  key             String? // e.g., "C#", "Fm"
  scale           String? // e.g., "major", "minor"
  danceability    Float? // Value indicating danceability
  energy          Float? // Value indicating perceived energy
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  artistId        String
  albumId         String?
  history         History[]
  playlists       PlaylistTrack[]
  featuredArtists TrackArtist[]
  genres          TrackGenre[]
  album           Album?          @relation(fields: [albumId], references: [id], onDelete: Cascade)
  artist          ArtistProfile   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  likedBy         UserLikeTrack[]
  labelId         String?
  label           Label?          @relation(fields: [labelId], references: [id], onDelete: SetNull)
  notifications   Notification[]
  reports         Report[]

  @@unique([title, artistId])
  @@index([title])
  @@index([artistId])
  @@index([albumId])
  @@index([playCount])
  @@index([releaseDate])
  @@index([isActive])
  @@index([createdAt])
  @@index([labelId])
  @@map("tracks")
}

model History {
  id        String      @id @default(cuid())
  type      HistoryType
  query     String?
  duration  Int?
  completed Boolean?
  playCount Int?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  trackId   String?
  userId    String
  track     Track?      @relation(fields: [trackId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([trackId])
  @@index([createdAt])
  @@index([playCount])
  @@map("histories")
}

model Playlist {
  id              String          @id @default(cuid())
  name            String
  description     String?
  coverUrl        String?
  privacy         PlaylistPrivacy @default(PRIVATE)
  type            PlaylistType    @default(NORMAL)
  isAIGenerated   Boolean         @default(false)
  totalTracks     Int             @default(0)
  totalDuration   Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userId          String? // Cho phép null để lưu playlist hệ thống
  user            User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tracks          PlaylistTrack[]
  lastGeneratedAt DateTime? // Theo dõi lần tạo AI gần nhất
  reports         Report[]

  @@index([userId])
  @@index([privacy])
  @@index([type])
  @@index([isAIGenerated])
  @@map("playlists")
}

model Genre {
  id             String        @id @default(cuid())
  name           String        @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  albums         AlbumGenre[]
  artistProfiles ArtistGenre[]
  tracks         TrackGenre[]

  @@index([name])
  @@map("genres")
}

model Notification {
  id            String           @id @default(cuid())
  type          NotificationType
  message       String
  isRead        Boolean          @default(false)
  recipientType RecipientType
  userId        String?
  artistId      String?
  senderId      String?
  trackId       String?
  albumId       String?
  claimId       String?
  count         Int?             @default(1)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  artist        ArtistProfile?   @relation("ArtistNotifications", fields: [artistId], references: [id], onDelete: Cascade)
  user          User?            @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  track         Track?           @relation(fields: [trackId], references: [id], onDelete: SetNull)
  album         Album?           @relation(fields: [albumId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([artistId])
  @@index([senderId])
  @@index([trackId])
  @@index([albumId])
  @@index([claimId])
  @@index([createdAt])
  @@map("notifications")
}

model UserFollow {
  id                String         @id @default(cuid())
  followerId        String
  followingUserId   String?
  followingArtistId String?
  followingType     FollowingType
  createdAt         DateTime       @default(now())
  follower          User           @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followingArtist   ArtistProfile? @relation("FollowingArtist", fields: [followingArtistId], references: [id], onDelete: Cascade)
  followingUser     User?          @relation("FollowingUser", fields: [followingUserId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingUserId, followingType])
  @@unique([followerId, followingArtistId, followingType])
  @@index([followerId])
  @@index([followingUserId])
  @@index([followingArtistId])
  @@map("user_follow")
}

model AlbumGenre {
  id        String   @id @default(cuid())
  albumId   String
  genreId   String
  createdAt DateTime @default(now())
  album     Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)
  genre     Genre    @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@unique([albumId, genreId])
  @@index([albumId])
  @@index([genreId])
  @@map("album_genre")
}

model TrackGenre {
  id        String   @id @default(cuid())
  trackId   String
  genreId   String
  createdAt DateTime @default(now())
  genre     Genre    @relation(fields: [genreId], references: [id], onDelete: Cascade)
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([trackId, genreId])
  @@index([trackId])
  @@index([genreId])
  @@map("track_genre")
}

model TrackArtist {
  id            String        @id @default(cuid())
  trackId       String
  artistId      String
  createdAt     DateTime      @default(now())
  artistProfile ArtistProfile @relation("FeaturedArtistRelation", fields: [artistId], references: [id], onDelete: Cascade)
  track         Track         @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([trackId, artistId])
  @@index([trackId])
  @@index([artistId])
  @@map("track_artist")
}

model PlaylistTrack {
  id         String   @id @default(cuid())
  playlistId String
  trackId    String
  addedAt    DateTime @default(now())
  trackOrder Int
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  track      Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([playlistId, trackId])
  @@index([playlistId])
  @@index([trackId])
  @@map("playlist_track")
}

model UserLikeTrack {
  id        String   @id @default(cuid())
  userId    String
  trackId   String
  createdAt DateTime @default(now())
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, trackId])
  @@index([userId])
  @@index([trackId])
  @@map("user_like_track")
}

model ArtistClaimRequest {
  id                String      @id @default(cuid())
  claimingUserId    String
  artistProfileId   String
  proof             String[]
  status            ClaimStatus @default(PENDING) // PENDING, APPROVED, REJECTED
  submittedAt       DateTime    @default(now())
  reviewedAt        DateTime?
  reviewedByAdminId String?
  rejectionReason   String?

  claimingUser    User          @relation("ClaimingUser", fields: [claimingUserId], references: [id], onDelete: Cascade)
  artistProfile   ArtistProfile @relation("ClaimedProfile", fields: [artistProfileId], references: [id], onDelete: Cascade)
  reviewedByAdmin User?         @relation("ReviewingAdmin", fields: [reviewedByAdminId], references: [id], onDelete: SetNull)

  @@unique([claimingUserId, artistProfileId])
  @@index([status])
  @@index([submittedAt])
  @@index([artistProfileId])
  @@map("artist_claim_requests")
}

model Report {
  id          String       @id @default(cuid())
  type        ReportType
  description String
  status      ReportStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  resolvedAt  DateTime?

  // Who submitted the report
  reporterId String
  reporter   User   @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)

  // Who resolved the report (admin)
  resolverId String?
  resolver   User?   @relation("AdminResolutions", fields: [resolverId], references: [id], onDelete: SetNull)

  // Resolution details
  resolution String?

  // What entity is being reported
  trackId String?
  track   Track?  @relation(fields: [trackId], references: [id], onDelete: Cascade)

  playlistId String?
  playlist   Playlist? @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  albumId String?
  album   Album?  @relation(fields: [albumId], references: [id], onDelete: Cascade)

  @@index([reporterId])
  @@index([resolverId])
  @@index([trackId])
  @@index([playlistId])
  @@index([albumId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("reports")
}

model LabelRegistrationRequest {
  id                        String  @id @default(cuid())
  requestedLabelName        String
  requestedLabelDescription String?
  requestedLabelLogoUrl     String?

  requestingArtistId String
  requestingArtist   ArtistProfile @relation("LabelRequestsByArtist", fields: [requestingArtistId], references: [id], onDelete: Cascade)

  status            RequestStatus @default(PENDING)
  submittedAt       DateTime      @default(now())
  reviewedAt        DateTime?
  reviewedByAdminId String?
  reviewedByAdmin   User?         @relation("AdminReviewedLabelRequests", fields: [reviewedByAdminId], references: [id], onDelete: SetNull)
  rejectionReason   String?

  createdLabelId String? @unique
  createdLabel   Label?  @relation(fields: [createdLabelId], references: [id], onDelete: SetNull)

  @@index([requestingArtistId])
  @@index([status])
  @@index([submittedAt])
  @@index([reviewedByAdminId])
  @@map("label_registration_requests")
}

model ArtistRequest {
  id                        String        @id @default(cuid())  
  artistName                String
  bio                       String?       @db.Text
  avatarUrl                 String?
  socialMediaLinks          Json?
  requestedGenres           String[]      @default([])
  status                    RequestStatus @default(PENDING)
  rejectionReason           String?       @db.Text
  requestedLabelName        String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@map("artist_requests")
}

enum ClaimStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  USER
  ARTIST
  ADMIN
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AlbumType {
  ALBUM
  EP
  SINGLE
}

enum HistoryType {
  SEARCH
  PLAY
}

enum PlaylistPrivacy {
  PUBLIC
  PRIVATE
}

enum PlaylistType {
  FAVORITE
  NORMAL
  SYSTEM
}

enum NotificationType {
  NEW_TRACK
  NEW_ALBUM
  NEW_FOLLOW
  ARTIST_REQUEST_APPROVE
  ARTIST_REQUEST_REJECT
  ACCOUNT_ACTIVATED
  ACCOUNT_DEACTIVATED
  ARTIST_REQUEST_SUBMITTED
  CLAIM_REQUEST_SUBMITTED
  CLAIM_REQUEST_APPROVED
  CLAIM_REQUEST_REJECTED
  NEW_REPORT_SUBMITTED
  REPORT_RESOLVED
  LABEL_REGISTRATION_SUBMITTED
  LABEL_REGISTRATION_APPROVED
  LABEL_REGISTRATION_REJECTED
}

enum FollowingType {
  USER
  ARTIST
}

enum RecipientType {
  USER
  ARTIST
}

enum ReportType {
  COPYRIGHT_VIOLATION
  INAPPROPRIATE_CONTENT
  AI_GENERATION_ISSUE
  OTHER
}

enum ReportStatus {
  PENDING
  RESOLVED
  REJECTED
}
