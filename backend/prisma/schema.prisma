// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  email String @unique
  username String @unique
  password String
  name String?
  avatar String?
  role Role @default(USER)
  isActive Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  albums Album[]
  tracks Track[]
  history History[]
  playlists Playlist[]

  @@index([email])
  @@index([username])
}

model Album {
  id String @id @default(cuid())
  title String
  artist String
  coverUrl String?
  releaseDate DateTime
  trackCount Int
  tracks Track[]
  uploadedBy User @relation(fields: [userId], references: [id])
  userId String
  discordMessageId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive Boolean @default(true)

  @@index([title])
  @@index([artist])
  @@index([userId])
}

model Track {
  id String @id @default(cuid())
  title String
  artist String
  featuredArtists String?
  duration Int
  releaseDate DateTime
  trackNumber Int?
  coverUrl String?
  audioUrl String
  audioMessageId String @unique
  album Album? @relation(fields: [albumId], references: [id])
  albumId String?
  uploadedBy User @relation(fields: [userId], references: [id])
  userId String
  discordMessageId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive Boolean @default(true)
  playCount Int @default(0)
  playlists Playlist[]
  history History[]

  @@index([title])
  @@index([artist])
  @@index([albumId])
  @@index([userId])
  @@index([playCount])
}

model History {
  id String @id @default(cuid())
  type HistoryType // SEARCH hoặc PLAY
  query String? // cho SEARCH
  track Track? @relation(fields: [trackId], references: [id])
  trackId String?
  user User @relation(fields: [userId], references: [id])
  userId String
  duration Int? // Thời gian nghe (giây) - cho PLAY
  completed Boolean? // Đã nghe hết bài chưa - cho PLAY
  playCount Int @default(0) // Số lần phát, chỉ dùng cho PLAY history
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([type])
  @@index([trackId])
  @@index([createdAt])
  @@index([playCount])
  @@unique([userId, trackId])
}

model Playlist {
  id String @id @default(cuid())
  name String
  description String?
  coverUrl String?
  privacy PlaylistPrivacy @default(PRIVATE)
  type PlaylistType @default(NORMAL)
  user User @relation(fields: [userId], references: [id])
  userId String
  tracks Track[]
  isAIGenerated Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([privacy])
  @@unique([userId, type]) // Đảm bảo mỗi user chỉ có 1 playlist FAVORITE
}

enum Role {
  USER
  ADMIN
}

enum HistoryType {
  SEARCH
  PLAY
}

enum PlaylistPrivacy {
  PUBLIC    // Ai cũng có thể xem
  PRIVATE   // Chỉ người tạo xem được
}

enum PlaylistType {
  FAVORITE
  NORMAL
}