import { spawn, execSync } from 'child_process';
import * as fs from 'fs-extra';
import * as path from 'path';
import * as readline from 'readline';
import 'dotenv/config';

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

// L·∫•y danh s√°ch file backup
function listBackups(): string[] {
  const backupDir = path.join(__dirname, '../backups');
  const files = fs
    .readdirSync(backupDir)
    .filter((file) => file.endsWith('.bak'))
    .sort((a, b) => {
      const statsA = fs.statSync(path.join(backupDir, a));
      const statsB = fs.statSync(path.join(backupDir, b));
      return statsB.mtime.getTime() - statsA.mtime.getTime(); // S·∫Øp x·∫øp theo th·ªùi gian gi·∫£m d·∫ßn
    });

  if (files.length === 0) {
    console.log('‚ùå Kh√¥ng t√¨m th·∫•y file backup n√†o');
    process.exit(1);
  }

  return files;
}

// Ch·ªçn file backup ƒë·ªÉ restore
function promptForBackup(): Promise<string> {
  const backupDir = path.join(__dirname, '../backups');
  return new Promise((resolve) => {
    const backups = listBackups();

    console.log('üìÅ Danh s√°ch c√°c file backup:');
    backups.forEach((file, index) => {
      const stats = fs.statSync(path.join(backupDir, file));
      const fileSizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
      console.log(
        `[${index + 1}] ${file} (${fileSizeInMB} MB - ${new Date(
          stats.mtime
        ).toLocaleString()})`
      );
    });

    rl.question('üìù Ch·ªçn s·ªë th·ª© t·ª± file backup ƒë·ªÉ restore: ', (answer) => {
      const index = parseInt(answer) - 1;
      if (isNaN(index) || index < 0 || index >= backups.length) {
        console.log('‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá');
        process.exit(1);
      }
      resolve(path.join(backupDir, backups[index]));
    });
  });
}

// X√°c nh·∫≠n restore
function confirmRestore(): Promise<void> {
  return new Promise((resolve) => {
    rl.question(
      '‚ö†Ô∏è C·∫¢NH B√ÅO: Restore s·∫Ω ghi ƒë√® l√™n d·ªØ li·ªáu hi·ªán t·∫°i. Ti·∫øp t·ª•c? (y/N): ',
      (answer) => {
        if (answer.toLowerCase() !== 'y') {
          console.log('‚ùå ƒê√£ h·ªßy thao t√°c restore');
          process.exit(0);
        }
        resolve();
      }
    );
  });
}

async function runRestore(): Promise<void> {
  try {
    const backupFile = await promptForBackup();
    await confirmRestore();

    console.log('üöÄ Starting database restore process...');

    console.log('‚öôÔ∏è Starting Prisma Postgres tunnel...');

    // ƒê∆∞·ªùng d·∫´n ƒë·∫øn Node executable
    const nodePath = process.execPath;
    // ƒê∆∞·ªùng d·∫´n ƒë·∫øn script c·ªßa ppg-tunnel trong node_modules
    const tunnelScriptPath = path.join(
      process.cwd(),
      'node_modules',
      '@prisma',
      'ppg-tunnel',
      'dist',
      'index.js'
    );

    const tunnel = spawn(nodePath, [
      tunnelScriptPath,
      '--host',
      '127.0.0.1',
      '--port',
      '5433',
    ]);

    // X·ª≠ l√Ω output t·ª´ tunnel
    let tunnelReady = false;

    tunnel.stdout.on('data', (data: Buffer) => {
      console.log(`Tunnel: ${data.toString().trim()}`);

      if (data.toString().includes('Prisma Postgres auth proxy listening')) {
        setTimeout(() => {
          tunnelReady = true;
          resetAndRestoreDatabase();
        }, 1000);
      }
    });

    tunnel.stderr.on('data', (data: Buffer) => {
      console.error(`Tunnel error: ${data.toString().trim()}`);
    });

    const timeoutId = setTimeout(() => {
      if (!tunnelReady) {
        console.error('‚ùå Tunnel connection timed out after 15 seconds');
        tunnel.kill();
        process.exit(1);
      }
    }, 15000);

    // H√†m m·ªõi: reset v√† restore database v·ªõi x√°c nh·∫≠n b·ªï sung
    async function resetAndRestoreDatabase(): Promise<void> {
      clearTimeout(timeoutId);
      console.log(
        '‚úÖ Tunnel ready, proceeding with database reset and restore...'
      );

      // Th√™m b∆∞·ªõc x√°c nh·∫≠n b·ªï sung tr∆∞·ªõc khi reset database
      return new Promise<void>((resolve) => {
        console.log('\n‚ö†Ô∏è ===== NGUY HI·ªÇM! X√ìA TO√ÄN B·ªò D·ªÆ LI·ªÜU ===== ‚ö†Ô∏è');
        console.log(
          'üö® Qu√° tr√¨nh n√†y s·∫Ω X√ìA HO√ÄN TO√ÄN t·∫•t c·∫£ d·ªØ li·ªáu hi·ªán c√≥ trong database'
        );
        console.log('üö® C√°c b·∫£ng, r√†ng bu·ªôc v√† d·ªØ li·ªáu s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn');
        console.log(
          'üö® Ch·ªâ ti·∫øp t·ª•c n·∫øu b·∫°n ƒë√£ sao l∆∞u t·∫•t c·∫£ th√¥ng tin quan tr·ªçng\n'
        );

        rl.question(
          'üëâ ƒê·ªÉ ti·∫øp t·ª•c, vui l√≤ng g√µ "RESET" (vi·∫øt HOA): ',
          (confirmation) => {
            if (confirmation !== 'RESET') {
              console.log(
                '‚ùå ƒê√£ h·ªßy thao t√°c restore do kh√¥ng x√°c nh·∫≠n reset database'
              );
              tunnel.kill();
              rl.close();
              process.exit(0);
            }

            console.log('‚úÖ X√°c nh·∫≠n th√†nh c√¥ng, ti·∫øn h√†nh reset database...');

            // Ti·∫øp t·ª•c v·ªõi quy tr√¨nh reset v√† restore
            try {
              // B∆Ø·ªöC 1: X√≥a b·∫£ng hi·ªán c√≥ b·∫±ng c√°ch s·ª≠ d·ª•ng l·ªánh DELETE
              console.log('üóëÔ∏è X√≥a t·∫•t c·∫£ d·ªØ li·ªáu t·ª´ c√°c b·∫£ng...');

              // S·ª≠ d·ª•ng DELETE FROM thay v√¨ TRUNCATE ƒë·ªÉ tr√°nh xung ƒë·ªôt v·ªõi triggers
              const deleteCommand = `
              psql -h 127.0.0.1 -p 5433 -d postgres -c "
                SET client_min_messages TO WARNING;
                DELETE FROM user_like_track;
                DELETE FROM playlist_track;
                DELETE FROM histories;
                DELETE FROM track_genre;
                DELETE FROM track_artist;
                DELETE FROM user_follow;
                DELETE FROM album_genre;
                DELETE FROM artist_genre;
                DELETE FROM tracks;
                DELETE FROM albums;
                DELETE FROM notifications;
                DELETE FROM events;
                DELETE FROM playlists;
                DELETE FROM artist_profiles;
                DELETE FROM users;
                DELETE FROM genres;
                DELETE FROM _prisma_migrations;
              "`;

              execSync(deleteCommand, {
                stdio: 'inherit',
                env: {
                  ...process.env,
                  PGSSLMODE: 'disable',
                },
              });

              console.log('‚úÖ D·ªØ li·ªáu hi·ªán c√≥ ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng');

              // B∆Ø·ªöC 2: Thay th·∫ø b∆∞·ªõc v√¥ hi·ªáu h√≥a r√†ng bu·ªôc b·∫±ng c√°ch s·ª≠ d·ª•ng nhi·ªÅu flags h∆°n
              console.log('üì• ƒêang n·∫°p d·ªØ li·ªáu t·ª´ backup...');

              // Th√™m flags ƒë·ªÉ x·ª≠ l√Ω t·ªët h∆°n vi·ªác kh√¥i ph·ª•c v√† kh·∫Øc ph·ª•c c√°c l·ªói ph·ªï bi·∫øn
              const restoreCommand = `pg_restore -h 127.0.0.1 -p 5433 -v --data-only --no-owner --no-privileges --disable-triggers --single-transaction --no-acl --clean --if-exists --exit-on-error=false -d postgres "${backupFile}"`;

              try {
                execSync(restoreCommand, {
                  stdio: 'inherit',
                  env: {
                    ...process.env,
                    PGSSLMODE: 'disable',
                  },
                });
              } catch (restoreError) {
                console.log(
                  '‚ö†Ô∏è Restore g·∫∑p m·ªôt s·ªë l·ªói nh∆∞ng v·∫´n ho√†n th√†nh. M·ªôt s·ªë d·ªØ li·ªáu c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c.'
                );
              }

              console.log(
                `‚úÖ ƒê√£ ho√†n th√†nh qu√° tr√¨nh kh√¥i ph·ª•c t·ª´ file: ${backupFile}`
              );
              console.log(
                '‚ú≥Ô∏è Ghi ch√∫: N·∫øu xu·∫•t hi·ªán th√¥ng b√°o l·ªói trong qu√° tr√¨nh kh√¥i ph·ª•c, m·ªôt s·ªë d·ªØ li·ªáu v·∫´n c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c n·∫°p th√†nh c√¥ng.'
              );
              console.log(
                '‚ú≥Ô∏è L∆∞u √Ω r·∫±ng d·ªØ li·ªáu c√≥ th·ªÉ kh√¥ng ho√†n to√†n nh·∫•t qu√°n do l·ªói r√†ng bu·ªôc kh√≥a ngo·∫°i.'
              );
            } catch (error) {
              console.error(
                '‚ùå Database operation failed:',
                error instanceof Error ? error.message : String(error)
              );
            } finally {
              // Lu√¥n k·∫øt th√∫c tunnel khi ho√†n t·∫•t
              tunnel.kill();
              rl.close();
              console.log('üîå Tunnel closed');
            }
          }
        );
      });
    }

    // X·ª≠ l√Ω khi tunnel k·∫øt th√∫c
    tunnel.on('close', (code: number | null) => {
      if (code !== 0 && !tunnelReady) {
        console.error(`‚ùå Tunnel process exited with code ${code}`);
      }
    });
  } catch (error) {
    console.error(
      '‚ùå L·ªói:',
      error instanceof Error ? error.message : String(error)
    );
    rl.close();
  }
}

// Ch·∫°y restore
runRestore().catch((error) => {
  console.error('Unhandled error during restore:', error);
  process.exit(1);
});
