import { spawn, execSync } from 'child_process';
import * as fs from 'fs-extra';
import * as path from 'path';
import * as readline from 'readline';
import 'dotenv/config';

// Th∆∞ m·ª•c ch·ª©a c√°c file backup
const backupDir = path.join(__dirname, '../backups');

// T·∫°o interface ƒë·ªÉ ƒë·ªçc input t·ª´ ng∆∞·ªùi d√πng
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

// L·∫•y danh s√°ch c√°c file backup
function getBackups(): {
  fileName: string;
  filePath: string;
  stats: fs.Stats;
}[] {
  return fs
    .readdirSync(backupDir)
    .filter((file) => file.endsWith('.bak'))
    .map((file) => ({
      fileName: file,
      filePath: path.join(backupDir, file),
      stats: fs.statSync(path.join(backupDir, file)),
    }))
    .sort((a, b) => b.stats.mtime.getTime() - a.stats.mtime.getTime());
}

// Hi·ªÉn th·ªã v√† cho ph√©p ng∆∞·ªùi d√πng ch·ªçn file backup
function selectBackup(): Promise<string | null> {
  return new Promise((resolve) => {
    const backups = getBackups();

    if (backups.length === 0) {
      console.log('‚ùå Kh√¥ng c√≥ file backup n√†o trong th∆∞ m·ª•c backups');
      resolve(null);
      return;
    }

    console.log('===== DANH S√ÅCH FILE BACKUP =====');
    backups.forEach((backup, index) => {
      const fileSizeMB = (backup.stats.size / (1024 * 1024)).toFixed(2);
      console.log(`[${index + 1}] ${backup.fileName}`);
      console.log(`    ‚îú‚îÄ‚îÄ K√≠ch th∆∞·ªõc: ${fileSizeMB} MB`);
      console.log(`    ‚îî‚îÄ‚îÄ Ng√†y t·∫°o: ${backup.stats.mtime.toLocaleString()}`);
    });

    rl.question(
      '\nCh·ªçn s·ªë th·ª© t·ª± file ƒë·ªÉ restore (nh·∫≠p 0 ƒë·ªÉ h·ªßy): ',
      (answer) => {
        const index = parseInt(answer) - 1;

        if (isNaN(index) || index < -1 || index >= backups.length) {
          console.log('‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá');
          resolve(null);
          return;
        }

        if (index === -1) {
          console.log('‚ùå ƒê√£ h·ªßy thao t√°c restore');
          resolve(null);
          return;
        }

        const selectedBackup = backups[index];
        console.log(`‚úÖ ƒê√£ ch·ªçn: ${selectedBackup.fileName}`);
        resolve(selectedBackup.filePath);
      }
    );
  });
}

// H√†m ch√≠nh ƒë·ªÉ restore database
async function runRestore(backupFilePath: string | null): Promise<void> {
  if (!backupFilePath) {
    rl.close();
    return;
  }

  console.log('üöÄ Starting database restore process...');
  console.log(`üì¶ Using backup file: ${backupFilePath}`);

  // X√°c nh·∫≠n tr∆∞·ªõc khi restore
  const confirmRestore = await new Promise<boolean>((resolve) => {
    rl.question(
      '‚ö†Ô∏è C·∫¢NH B√ÅO: Restore s·∫Ω ghi ƒë√® d·ªØ li·ªáu hi·ªán t·∫°i. B·∫°n c√≥ ch·∫Øc ch·∫Øn? (y/N): ',
      (answer) => {
        resolve(answer.toLowerCase() === 'y');
      }
    );
  });

  if (!confirmRestore) {
    console.log('‚ùå ƒê√£ h·ªßy thao t√°c restore');
    rl.close();
    return;
  }

  console.log('‚öôÔ∏è Starting Prisma Postgres tunnel...');

  // ƒê∆∞·ªùng d·∫´n ƒë·∫øn Node executable
  const nodePath = process.execPath;
  const tunnelScriptPath = path.join(
    process.cwd(),
    'node_modules',
    '@prisma',
    'ppg-tunnel',
    'dist',
    'index.js'
  );

  const tunnel = spawn(nodePath, [
    tunnelScriptPath,
    '--host',
    '127.0.0.1',
    '--port',
    '5433',
  ]);

  // L·ªánh pg_restore
  const pgRestoreCommand = `pg_restore -h 127.0.0.1 -p 5433 -v --clean --if-exists --no-owner --no-privileges --no-comments -d postgres "${backupFilePath}"`;

  let tunnelReady = false;

  tunnel.stdout.on('data', (data: Buffer) => {
    console.log(`Tunnel: ${data.toString().trim()}`);

    if (data.toString().includes('Prisma Postgres auth proxy listening')) {
      // Th√™m m·ªôt kho·∫£ng th·ªùi gian nh·ªè ƒë·ªÉ ƒë·∫£m b·∫£o tunnel ho√†n to√†n s·∫µn s√†ng
      setTimeout(() => {
        tunnelReady = true;
        runPgRestore();
      }, 1000);
    }
  });

  tunnel.stderr.on('data', (data: Buffer) => {
    console.error(`Tunnel error: ${data.toString().trim()}`);
  });

  // Thi·∫øt l·∫≠p timeout n·∫øu tunnel kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c
  const timeoutId = setTimeout(() => {
    if (!tunnelReady) {
      console.error('‚ùå Tunnel connection timed out after 15 seconds');
      tunnel.kill();
      rl.close();
      process.exit(1);
    }
  }, 15000);

  // H√†m ƒë·ªÉ ch·∫°y pg_restore sau khi tunnel s·∫µn s√†ng
  function runPgRestore(): void {
    clearTimeout(timeoutId);
    console.log('‚úÖ Tunnel ready, proceeding with restore...');
    console.log(`‚öôÔ∏è Running restore command: ${pgRestoreCommand}`);

    try {
      // Ch·∫°y pg_restore v·ªõi PGSSLMODE=disable
      execSync(pgRestoreCommand, {
        stdio: 'inherit',
        env: {
          ...process.env,
          PGSSLMODE: 'disable',
        },
      });

      console.log(`‚úÖ Restore completed successfully!`);
    } catch (error) {
      // M·ªôt s·ªë l·ªói trong qu√° tr√¨nh restore l√† b√¨nh th∆∞·ªùng
      console.log(
        '‚ö†Ô∏è Restore completed with some warnings (this is normal):',
        error instanceof Error ? error.message : String(error)
      );
      console.log(
        '‚úÖ Database should be usable, please check your application.'
      );

      // Kh√¥ng coi ƒë√¢y l√† l·ªói nghi√™m tr·ªçng
      console.log(`‚úÖ Restore process completed!`);
    } finally {
      // Lu√¥n k·∫øt th√∫c tunnel khi ho√†n t·∫•t
      tunnel.kill();
      console.log('üîå Tunnel closed');
      rl.close();
    }
  }

  // X·ª≠ l√Ω khi tunnel k·∫øt th√∫c
  tunnel.on('close', (code: number | null) => {
    if (code !== 0 && !tunnelReady) {
      console.error(`‚ùå Tunnel process exited with code ${code}`);
      rl.close();
    }
  });
}

// Ch·∫°y script
async function main() {
  try {
    const backupPath = await selectBackup();
    await runRestore(backupPath);
  } catch (error) {
    console.error('Unhandled error during restore:', error);
    rl.close();
    process.exit(1);
  }
}

main();
