import * as fs from 'fs-extra';
import * as path from 'path';
import * as readline from 'readline';

// ƒê·ªãnh nghƒ©a interface cho file backup
interface BackupFile {
  fileName: string;
  filePath: string;
  stats: fs.Stats;
}

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c backups
const backupDir = path.join(__dirname, '../backups');

// T·∫°o interface ƒë·ªÉ ƒë·ªçc input t·ª´ ng∆∞·ªùi d√πng
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

// L·∫•y danh s√°ch c√°c file backup
function getBackups(): BackupFile[] {
  return fs
    .readdirSync(backupDir)
    .filter((file) => file.endsWith('.bak'))
    .map((file) => ({
      fileName: file,
      filePath: path.join(backupDir, file),
      stats: fs.statSync(path.join(backupDir, file)),
    }))
    .sort((a, b) => b.stats.mtime.getTime() - a.stats.mtime.getTime());
}

// Hi·ªÉn th·ªã danh s√°ch c√°c file backup
function listBackups(): void {
  const backups = getBackups();

  if (backups.length === 0) {
    console.log('‚ö†Ô∏è Kh√¥ng c√≥ file backup n√†o');
    return;
  }

  console.log('\n===== DANH S√ÅCH FILE BACKUP =====');

  let totalSize = 0;

  backups.forEach((backup, index) => {
    const fileSizeMB = (backup.stats.size / (1024 * 1024)).toFixed(2);
    totalSize += backup.stats.size;

    console.log(`[${index + 1}] ${backup.fileName}`);
    console.log(`    ‚îú‚îÄ‚îÄ K√≠ch th∆∞·ªõc: ${fileSizeMB} MB`);
    console.log(`    ‚îú‚îÄ‚îÄ Ng√†y t·∫°o: ${backup.stats.mtime.toLocaleString()}`);
    console.log(`    ‚îî‚îÄ‚îÄ ƒê∆∞·ªùng d·∫´n: ${backup.filePath}`);
  });

  console.log('\n===== TH·ªêNG K√ä =====');
  console.log(`T·ªïng s·ªë file: ${backups.length}`);
  console.log(
    `T·ªïng dung l∆∞·ª£ng: ${(totalSize / (1024 * 1024)).toFixed(2)} MB\n`
  );
}

// X√≥a file backup c≈©
function deleteOldBackups(): void {
  const backups = getBackups();

  if (backups.length <= 5) {
    console.log('‚ö†Ô∏è Kh√¥ng ƒë·ªß file backup ƒë·ªÉ x√≥a (‚â§ 5 file)');
    showMenu();
    return;
  }

  // Gi·ªØ l·∫°i 5 file backup g·∫ßn ƒë√¢y nh·∫•t
  const backupsToDelete = backups.slice(5);

  console.log(`\n‚ö†Ô∏è S·∫Ω x√≥a ${backupsToDelete.length} file backup c≈©:`);
  backupsToDelete.forEach((backup, index) => {
    console.log(
      `[${index + 1}] ${backup.fileName} (${(
        backup.stats.size /
        (1024 * 1024)
      ).toFixed(2)} MB)`
    );
  });

  rl.question('\nB·∫°n c√≥ mu·ªën ti·∫øp t·ª•c x√≥a? (y/N): ', (answer) => {
    if (answer.toLowerCase() !== 'y') {
      console.log('‚ùå ƒê√£ h·ªßy thao t√°c x√≥a');
      showMenu();
      return;
    }

    try {
      backupsToDelete.forEach((backup) => {
        fs.unlinkSync(backup.filePath);
        console.log(`‚úÖ ƒê√£ x√≥a: ${backup.fileName}`);
      });
      console.log(`\n‚úÖ ƒê√£ x√≥a ${backupsToDelete.length} file backup c≈©`);
    } catch (error) {
      console.error(
        '‚ùå L·ªói khi x√≥a file:',
        error instanceof Error ? error.message : String(error)
      );
    }

    showMenu();
  });
}

// X√≥a m·ªôt file backup c·ª• th·ªÉ
function deleteSpecificBackup(): void {
  const backups = getBackups();

  if (backups.length === 0) {
    console.log('‚ö†Ô∏è Kh√¥ng c√≥ file backup n√†o ƒë·ªÉ x√≥a');
    showMenu();
    return;
  }

  console.log('\n===== CH·ªåN FILE ƒê·ªÇ X√ìA =====');
  backups.forEach((backup, index) => {
    console.log(
      `[${index + 1}] ${backup.fileName} (${(
        backup.stats.size /
        (1024 * 1024)
      ).toFixed(2)} MB)`
    );
  });

  rl.question('\nCh·ªçn s·ªë th·ª© t·ª± file ƒë·ªÉ x√≥a (nh·∫≠p 0 ƒë·ªÉ h·ªßy): ', (answer) => {
    const index = parseInt(answer) - 1;

    if (isNaN(index) || index < -1 || index >= backups.length) {
      console.log('‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá');
      showMenu();
      return;
    }

    if (index === -1) {
      console.log('‚ùå ƒê√£ h·ªßy thao t√°c x√≥a');
      showMenu();
      return;
    }

    const backupToDelete = backups[index];

    rl.question(
      `\n‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a "${backupToDelete.fileName}"? (y/N): `,
      (confirm) => {
        if (confirm.toLowerCase() !== 'y') {
          console.log('‚ùå ƒê√£ h·ªßy thao t√°c x√≥a');
          showMenu();
          return;
        }

        try {
          fs.unlinkSync(backupToDelete.filePath);
          console.log(`‚úÖ ƒê√£ x√≥a file: ${backupToDelete.fileName}`);
        } catch (error) {
          console.error(
            '‚ùå L·ªói khi x√≥a file:',
            error instanceof Error ? error.message : String(error)
          );
        }

        showMenu();
      }
    );
  });
}

// Hi·ªÉn th·ªã menu ch√≠nh
function showMenu(): void {
  console.clear();
  console.log('===== QU·∫¢N L√ù BACKUP =====');
  console.log('[1] Li·ªát k√™ c√°c file backup');
  console.log('[2] X√≥a c√°c file backup c≈© (gi·ªØ l·∫°i 5 file m·ªõi nh·∫•t)');
  console.log('[3] X√≥a file backup c·ª• th·ªÉ');
  console.log('[0] Tho√°t');

  rl.question('\nCh·ªçn t√πy ch·ªçn: ', (answer) => {
    switch (answer) {
      case '1':
        listBackups();
        rl.question('\nNh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh...', () => {
          showMenu();
        });
        break;
      case '2':
        deleteOldBackups();
        break;
      case '3':
        deleteSpecificBackup();
        break;
      case '0':
        console.log('üëã T·∫°m bi·ªát!');
        rl.close();
        break;
      default:
        console.log('‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá');
        showMenu();
        break;
    }
  });
}

// B·∫Øt ƒë·∫ßu ch∆∞∆°ng tr√¨nh
showMenu();
